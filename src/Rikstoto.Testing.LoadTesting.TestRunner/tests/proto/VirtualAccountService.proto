syntax = "proto3";

option csharp_namespace = "Rikstoto.Service.Accounting.Contracts.Protobuf";
import "VirtualAccountServiceContracts.proto";
import "VirtualAccountServiceEnums.proto";
import "rikstoto_grpc_sharedcontracts.proto";
import "google/protobuf/timestamp.proto";

service VirtualAccountService {
	rpc HealthCheck(HealthCheckRequest) returns (rikstoto.shared.protobuf.HealthCheckResult) {}
	rpc CustomerHasBankAccount(CustomerHasBankAccountRequest) returns (CustomerHasBankAccountResponse) {}

	rpc FindAccount (FindAccountRequest ) returns (FindAccountResponse){}
	rpc GetAccount (GetAccountRequest ) returns (GetAccountResponse){}
	rpc GetTransactionsByCustomerAndMonth (GetTransactionsByCustomerAndMonthRequest) returns (GetTransactionsByCustomerAndMonthResponse){}
	rpc GetBetAndPayoutAmount (GetBetAndPayoutAmountRequest) returns (GetBetAndPayoutAmountResponse){}
	rpc GetHistoricBookBalance(GetHistoricBookBalanceRequest) returns (GetHistoricBookBalanceResponse){}
	rpc GetBankWithdrawalsForDate(GetBankWithdrawalsForDateRequest) returns (GetBankWithdrawalsForDateResponse) {}

	rpc StopBankTransfer(StopBankTransferRequest) returns (rikstoto.shared.protobuf.CommandResult) {}
	rpc Withdraw(WithdrawRequest) returns (rikstoto.shared.protobuf.CommandResult) {}
	rpc GenerateBankTransferFile(GenerateBankTransferFileRequest) returns (rikstoto.shared.protobuf.CommandResult) {}
	rpc GenerateTransactionReport(GenerateTransactionReportRequest) returns (rikstoto.shared.protobuf.CommandResult) {}

	rpc GetPurchaseTransactions(GetPurchaseTransactionsRequest) returns (GetPurchaseTransactionsResponse) {}

	rpc Reserve(ReserveRequest) returns (rikstoto.shared.protobuf.CommandResult) {}
	rpc HasEnoughFunds(HasEnoughFundsRequest) returns (HasEnoughFundsResponse) {}
	rpc GetBalance(GetBalanceRequest) returns (GetBalanceResponse) {}
	rpc CancelReservation(CancelReservationRequest) returns (rikstoto.shared.protobuf.CommandResult) {}
	rpc GetBankWithdrawal(GetBankWithdrawalRequest) returns (GetBankWithdrawalResponse) {}
	rpc CancelReservationFromNra(CancelReservationFromNraRequest) returns (rikstoto.shared.protobuf.CommandResult) {}
	rpc IsVippsTransactionDeposited(IsVippsTransactionDepositedRequest) returns (IsVippsTransactionDepositedResponse) {}
	rpc IsNetsTransactionDeposited(IsNetsTransactionDepositedRequest) returns (IsNetsTransactionDepositedResponse) {}
}

message HealthCheckRequest {
}

message CustomerHasBankAccountRequest {
	rikstoto.shared.protobuf.CustomerKey customer = 1;
}

message CustomerHasBankAccountResponse {
	bool CustomerHasBankAccountNumber = 1;
}

message FindAccountRequest {
	rikstoto.shared.protobuf.CustomerKey customer = 1;
}

message FindAccountResponse {
	bool found = 1;
	VirtualAccount account = 2;
}

message GetAccountRequest {
	rikstoto.shared.protobuf.CustomerKey customer = 1;
}

message GetAccountResponse {
	VirtualAccount account = 1;
}

message GetTransactionsByCustomerAndMonthRequest {
	rikstoto.shared.protobuf.CustomerKey customer = 1;
	int32 year = 2;
	int32 month = 3;
}

message GetTransactionsByCustomerAndMonthResponse {
	repeated Transaction transactions = 1;
}

message GetBetAndPayoutAmountRequest {
	rikstoto.shared.protobuf.CustomerKey customer = 1;
	google.protobuf.Timestamp from = 2;
	google.protobuf.Timestamp to = 3;
}

message GetBetAndPayoutAmountResponse {
	rikstoto.shared.protobuf.Money betAmount = 2;
	rikstoto.shared.protobuf.Money winRefundAmount = 3;
}

message GetHistoricBookBalanceRequest {
	rikstoto.shared.protobuf.CustomerKey customer = 1;
	google.protobuf.Timestamp date = 2;
}

message GetHistoricBookBalanceResponse{
	rikstoto.shared.protobuf.Money balanceAmount = 1;
}

message GetBankWithdrawalsForDateRequest {
	google.protobuf.Timestamp date = 1;
}

message GetBankWithdrawalsForDateResponse {
	repeated BankWithdrawal bankWithdrawals = 1;
}

message StopBankTransferRequest {
	string bankTransferCorrelationId = 1;
}

message WithdrawRequest {
	string clientCorrelationId = 1;
	rikstoto.shared.protobuf.CustomerKey customer = 2;
	string externalBankAccountNumber = 3;
	rikstoto.shared.protobuf.Money amountToWithdraw = 4;
}

message GenerateBankTransferFileRequest {
	google.protobuf.Timestamp betDate = 1;
}

message GenerateTransactionReportRequest {
	google.protobuf.Timestamp dateToGenerateFileFor = 1;
}

message GetPurchaseTransactionsRequest {
	string purchaseId = 1;
}

message GetPurchaseTransactionsResponse {
	repeated PurchaseTransaction transactions = 1;
}

message PurchaseTransaction {
	string purchaseId = 1;
	rikstoto.shared.protobuf.CustomerKey customer = 2;
	rikstoto.shared.protobuf.Money amount = 3;
	google.protobuf.Timestamp addedTime = 4;
	string typeOfTransaction = 5;
	string description = 6;
	string transactionStatus = 7;
}

message ReserveRequest {
	string purchaseId = 1;
	rikstoto.shared.protobuf.CustomerKey customer = 2;
	rikstoto.shared.protobuf.Money amount = 3;
	bool withoutExpiration = 4;
	string transactionText = 5;
}

message HasEnoughFundsRequest {
	rikstoto.shared.protobuf.CustomerKey customer = 1;
	rikstoto.shared.protobuf.Money amount = 2;
}

message HasEnoughFundsResponse {
	bool hasEnoughFunds = 1;
}

message GetBalanceRequest {
	rikstoto.shared.protobuf.CustomerKey customer = 1;
}

message GetBalanceResponse {
	rikstoto.shared.protobuf.Money balance = 1;
}

message CancelReservationRequest {
	string purchaseId = 1;
	rikstoto.shared.protobuf.CustomerKey customer = 2;
}

message GetBankWithdrawalRequest {
	string correlationId = 1;
}

message GetBankWithdrawalResponse {
	BankWithdrawal bankWithdrawal = 1;
}

message CancelReservationFromNraRequest {
	string purchaseId = 1;
	rikstoto.shared.protobuf.CustomerKey customer = 2;
	string performedBy = 3;
	string comment = 4;
}

message IsVippsTransactionDepositedRequest {
	rikstoto.shared.protobuf.CustomerKey customer = 1;
	string purchaseId = 2;
}

message IsVippsTransactionDepositedResponse {
	bool isDeposited = 1;
	bool isRegisteredToday = 2;
	google.protobuf.Timestamp addedTime = 3;
}

message IsNetsTransactionDepositedRequest {
	rikstoto.shared.protobuf.CustomerKey customer = 1;
	string transactionId = 2;
}

message IsNetsTransactionDepositedResponse {
	bool isDeposited = 1;
}